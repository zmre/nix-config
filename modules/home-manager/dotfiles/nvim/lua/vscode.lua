-- -- Stolen from https://github.com/vscode-neovim/vscode-neovim/blob/HEAD/vim/vscode-window-commands.vim
-- vim.api.nvim_exec([[
-- function! s:split(...) abort
--     let direction = a:1
--     let file = exists('a:2') ? a:2 : ''
--     call VSCodeCall(direction ==# 'h' ? 'workbench.action.splitEditorDown' : 'workbench.action.splitEditorRight')
--     if !empty(file)
--         call VSCodeExtensionNotify('open-file', expand(file), 'all')
--     endif
-- endfunction
-- function! s:splitNew(...)
--     let file = a:2
--     call s:split(a:1, empty(file) ? '__vscode_new__' : file)
-- endfunction
-- function! s:closeOtherEditors()
--     call VSCodeNotify('workbench.action.closeEditorsInOtherGroups')
--     call VSCodeNotify('workbench.action.closeOtherEditors')
-- endfunction
-- function! s:manageEditorHeight(...)
--     let count = a:1
--     let to = a:2
--     for i in range(1, count ? count : 1)
--         call VSCodeNotify(to ==# 'increase' ? 'workbench.action.increaseViewHeight' : 'workbench.action.decreaseViewHeight')
--     endfor
-- endfunction
-- function! s:manageEditorWidth(...)
--     let count = a:1
--     let to = a:2
--     for i in range(1, count ? count : 1)
--         call VSCodeNotify(to ==# 'increase' ? 'workbench.action.increaseViewWidth' : 'workbench.action.decreaseViewWidth')
--     endfor
-- endfunction
-- command! -complete=file -nargs=? Split call <SID>split('h', <q-args>)
-- command! -complete=file -nargs=? Vsplit call <SID>split('v', <q-args>)
-- command! -complete=file -nargs=? New call <SID>split('h', '__vscode_new__')
-- command! -complete=file -nargs=? Vnew call <SID>split('v', '__vscode_new__')
-- command! -bang Only if <q-bang> ==# '!' | call <SID>closeOtherEditors() | else | call VSCodeNotify('workbench.action.joinAllGroups') | endif
-- AlterCommand sp[lit] Split
-- AlterCommand vs[plit] Vsplit
-- AlterCommand new New
-- AlterCommand vne[w] Vnew
-- AlterCommand on[ly] Only
-- " buffer management
-- nnoremap <C-w>n <Cmd>call <SID>splitNew('h', '__vscode_new__')<CR>
-- xnoremap <C-w>n <Cmd>call <SID>splitNew('h', '__vscode_new__')<CR>
-- nnoremap <C-w>q <Cmd>call VSCodeNotify('workbench.action.closeActiveEditor')<CR>
-- xnoremap <C-w>q <Cmd>call VSCodeNotify('workbench.action.closeActiveEditor')<CR>
-- nnoremap <C-w>c <Cmd>call VSCodeNotify('workbench.action.closeActiveEditor')<CR>
-- xnoremap <C-w>c <Cmd>call VSCodeNotify('workbench.action.closeActiveEditor')<CR>
-- nnoremap <C-w><C-c> <Cmd>call VSCodeNotify('workbench.action.closeActiveEditor')<CR>
-- xnoremap <C-w><C-c> <Cmd>call VSCodeNotify('workbench.action.closeActiveEditor')<CR>
-- " window/splits management 
-- nnoremap <C-w>s <Cmd>call <SID>split('h')<CR>
-- xnoremap <C-w>s <Cmd>call <SID>split('h')<CR>
-- nnoremap <C-w><C-s> <Cmd>call <SID>split('h')<CR>
-- xnoremap <C-w><C-s> <Cmd>call <SID>split('h')<CR>
-- nnoremap <C-w>v <Cmd>call <SID>split('v')<CR>
-- xnoremap <C-w>v <Cmd>call <SID>split('v')<CR>
-- nnoremap <C-w><C-v> <Cmd>call <SID>split('v')<CR>
-- xnoremap <C-w><C-v> <Cmd>call <SID>split('v')<CR>
-- nnoremap <C-w>= <Cmd>call VSCodeNotify('workbench.action.evenEditorWidths')<CR>
-- xnoremap <C-w>= <Cmd>call VSCodeNotify('workbench.action.evenEditorWidths')<CR>
-- nnoremap <C-w>_ <Cmd>call VSCodeNotify('workbench.action.toggleEditorWidths')<CR>
-- xnoremap <C-w>_ <Cmd>call VSCodeNotify('workbench.action.toggleEditorWidths')<CR>
-- nnoremap <C-w>+ <Cmd>call <SID>manageEditorHeight(v:count, 'increase')<CR>
-- xnoremap <C-w>+ <Cmd>call <SID>manageEditorHeight(v:count, 'increase')<CR>
-- nnoremap <C-w>- <Cmd>call <SID>manageEditorHeight(v:count, 'decrease')<CR>
-- xnoremap <C-w>- <Cmd>call <SID>manageEditorHeight(v:count, 'decrease')<CR>
-- nnoremap <C-w>> <Cmd>call <SID>manageEditorWidth(v:count,  'increase')<CR>
-- xnoremap <C-w>> <Cmd>call <SID>manageEditorWidth(v:count,  'increase')<CR>
-- nnoremap <C-w>< <Cmd>call <SID>manageEditorWidth(v:count,  'decrease')<CR>
-- xnoremap <C-w>< <Cmd>call <SID>manageEditorWidth(v:count,  'decrease')<CR>
-- nnoremap <C-w>o <Cmd>call VSCodeNotify('workbench.action.joinAllGroups')<CR>
-- xnoremap <C-w>o <Cmd>call VSCodeNotify('workbench.action.joinAllGroups')<CR>
-- nnoremap <C-w><C-o> <Cmd>call VSCodeNotify('workbench.action.joinAllGroups')<CR>
-- xnoremap <C-w><C-o> <Cmd>call VSCodeNotify('workbench.action.joinAllGroups')<CR>
-- " window navigation
-- nnoremap <C-w>j <Cmd>call VSCodeNotify('workbench.action.focusBelowGroup')<CR>
-- xnoremap <C-w>j <Cmd>call VSCodeNotify('workbench.action.focusBelowGroup')<CR>
-- nnoremap <C-w>k <Cmd>call VSCodeNotify('workbench.action.focusAboveGroup')<CR>
-- xnoremap <C-w>k <Cmd>call VSCodeNotify('workbench.action.focusAboveGroup')<CR>
-- nnoremap <C-w>h <Cmd>call VSCodeNotify('workbench.action.focusLeftGroup')<CR>
-- xnoremap <C-w>h <Cmd>call VSCodeNotify('workbench.action.focusLeftGroup')<CR>
-- nnoremap <C-w>l <Cmd>call VSCodeNotify('workbench.action.focusRightGroup')<CR>
-- xnoremap <C-w>l <Cmd>call VSCodeNotify('workbench.action.focusRightGroup')<CR>
-- nnoremap <C-w><Down> <Cmd>call VSCodeNotify('workbench.action.focusBelowGroup')<CR>
-- xnoremap <C-w><Down> <Cmd>call VSCodeNotify('workbench.action.focusBelowGroup')<CR>
-- nnoremap <C-w><Up> <Cmd>call VSCodeNotify('workbench.action.focusAboveGroup')<CR>
-- xnoremap <C-w><Up> <Cmd>call VSCodeNotify('workbench.action.focusAboveGroup')<CR>
-- nnoremap <C-w><Left> <Cmd>call VSCodeNotify('workbench.action.focusLeftGroup')<CR>
-- xnoremap <C-w><Left> <Cmd>call VSCodeNotify('workbench.action.focusLeftGroup')<CR>
-- nnoremap <C-w><Right> <Cmd>call VSCodeNotify('workbench.action.focusRightGroup')<CR>
-- xnoremap <C-w><Right> <Cmd>call VSCodeNotify('workbench.action.focusRightGroup')<CR>
-- nnoremap <C-w><C-j> <Cmd>call VSCodeNotify('workbench.action.moveEditorToBelowGroup')<CR>
-- xnoremap <C-w><C-j> <Cmd>call VSCodeNotify('workbench.action.moveEditorToBelowGroup')<CR>
-- nnoremap <C-w><C-i> <Cmd>call VSCodeNotify('workbench.action.moveEditorToAboveGroup')<CR>
-- xnoremap <C-w><C-i> <Cmd>call VSCodeNotify('workbench.action.moveEditorToAboveGroup')<CR>
-- nnoremap <C-w><C-h> <Cmd>call VSCodeNotify('workbench.action.moveEditorToLeftGroup')<CR>
-- xnoremap <C-w><C-h> <Cmd>call VSCodeNotify('workbench.action.moveEditorToLeftGroup')<CR>
-- nnoremap <C-w><C-l> <Cmd>call VSCodeNotify('workbench.action.moveEditorToRightGroup')<CR>
-- xnoremap <C-w><C-l> <Cmd>call VSCodeNotify('workbench.action.moveEditorToRightGroup')<CR>
-- nnoremap <C-w><C-Down> <Cmd>call VSCodeNotify('workbench.action.moveEditorToBelowGroup')<CR>
-- xnoremap <C-w><C-Down> <Cmd>call VSCodeNotify('workbench.action.moveEditorToBelowGroup')<CR>
-- nnoremap <C-w><C-Up> <Cmd>call VSCodeNotify('workbench.action.moveEditorToAboveGroup')<CR>
-- xnoremap <C-w><C-Up> <Cmd>call VSCodeNotify('workbench.action.moveEditorToAboveGroup')<CR>
-- nnoremap <C-w><C-Left> <Cmd>call VSCodeNotify('workbench.action.moveEditorToLeftGroup')<CR>
-- xnoremap <C-w><C-Left> <Cmd>call VSCodeNotify('workbench.action.moveEditorToLeftGroup')<CR>
-- nnoremap <C-w><C-Right> <Cmd>call VSCodeNotify('workbench.action.moveEditorToRightGroup')<CR>
-- xnoremap <C-w><C-Right> <Cmd>call VSCodeNotify('workbench.action.moveEditorToRightGroup')<CR>
-- nnoremap <C-w><S-j> <Cmd>call VSCodeNotify('workbench.action.moveActiveEditorGroupDown')<CR>
-- xnoremap <C-w><S-j> <Cmd>call VSCodeNotify('workbench.action.moveActiveEditorGroupDown')<CR>
-- nnoremap <C-w><S-k> <Cmd>call VSCodeNotify('workbench.action.moveActiveEditorGroupUp')<CR>
-- xnoremap <C-w><S-k> <Cmd>call VSCodeNotify('workbench.action.moveActiveEditorGroupUp')<CR>
-- nnoremap <C-w><S-h> <Cmd>call VSCodeNotify('workbench.action.moveActiveEditorGroupLeft')<CR>
-- xnoremap <C-w><S-h> <Cmd>call VSCodeNotify('workbench.action.moveActiveEditorGroupLeft')<CR>
-- nnoremap <C-w><S-l> <Cmd>call VSCodeNotify('workbench.action.moveActiveEditorGroupRight')<CR>
-- xnoremap <C-w><S-l> <Cmd>call VSCodeNotify('workbench.action.moveActiveEditorGroupRight')<CR>
-- nnoremap <C-w><S-Down> <Cmd>call VSCodeNotify('workbench.action.moveActiveEditorGroupDown')<CR>
-- xnoremap <C-w><S-Down> <Cmd>call VSCodeNotify('workbench.action.moveActiveEditorGroupDown')<CR>
-- nnoremap <C-w><S-Up> <Cmd>call VSCodeNotify('workbench.action.moveActiveEditorGroupUp')<CR>
-- xnoremap <C-w><S-Up> <Cmd>call VSCodeNotify('workbench.action.moveActiveEditorGroupUp')<CR>
-- nnoremap <C-w><S-Left> <Cmd>call VSCodeNotify('workbench.action.moveActiveEditorGroupLeft')<CR>
-- xnoremap <C-w><S-Left> <Cmd>call VSCodeNotify('workbench.action.moveActiveEditorGroupLeft')<CR>
-- nnoremap <C-w><S-Right> <Cmd>call VSCodeNotify('workbench.action.moveActiveEditorGroupRight')<CR>
-- xnoremap <C-w><S-Right> <Cmd>call VSCodeNotify('workbench.action.moveActiveEditorGroupRight')<CR>
-- nnoremap <C-w>w <Cmd>call VSCodeNotify('workbench.action.focusNextGroup')<CR>
-- xnoremap <C-w>w <Cmd>call VSCodeNotify('workbench.action.focusNextGroup')<CR>
-- nnoremap <C-w><C-w> <Cmd>call VSCodeNotify('workbench.action.focusNextGroup')<CR>
-- xnoremap <C-w><C-w> <Cmd>call VSCodeNotify('workbench.action.focusNextGroup')<CR>
-- nnoremap <C-w>W <Cmd>call VSCodeNotify('workbench.action.focusPreviousGroup')<CR>
-- xnoremap <C-w>W <Cmd>call VSCodeNotify('workbench.action.focusPreviousGroup')<CR>
-- nnoremap <C-w>p <Cmd>call VSCodeNotify('workbench.action.focusPreviousGroup')<CR>
-- xnoremap <C-w>p <Cmd>call VSCodeNotify('workbench.action.focusPreviousGroup')<CR>
-- nnoremap <C-w>t <Cmd>call VSCodeNotify('workbench.action.focusFirstEditorGroup')<CR>
-- xnoremap <C-w>t <Cmd>call VSCodeNotify('workbench.action.focusFirstEditorGroup')<CR>
-- nnoremap <C-w>b <Cmd>call VSCodeNotify('workbench.action.focusLastEditorGroup')<CR>
-- xnoremap <C-w>b <Cmd>call VSCodeNotify('workbench.action.focusLastEditorGroup')<CR>
-- ]], false)
-- -- Stolen from https://github.com/vscode-neovim/vscode-neovim/blob/HEAD/vim/vscode-file-commands.vim
-- vim.api.nvim_exec([[
-- function! s:editOrNew(...)
--     let file = a:1
--     let bang = a:2
--     if empty(file)
--         if bang ==# '!'
--             call VSCodeNotify('workbench.action.files.revert')
--         else
--             call VSCodeNotify('workbench.action.quickOpen')
--         endif
--     else
--         " Last arg is to close previous file, e.g. e! ~/blah.txt will open blah.txt instead the current file
--         call VSCodeExtensionNotify('open-file', expand(file), bang ==# '!' ? 1 : 0)
--     endif
-- endfunction
-- function! s:saveAndClose() abort
--     call VSCodeCall('workbench.action.files.save')
--     call VSCodeNotify('workbench.action.closeActiveEditor')
-- endfunction
-- function! s:saveAllAndClose() abort
--     call VSCodeCall('workbench.action.files.saveAll')
--     call VSCodeNotify('workbench.action.closeAllEditors')
-- endfunction
-- " command! -bang -nargs=? Edit call VSCodeCall('workbench.action.quickOpen')
-- command! -complete=file -bang -nargs=? Edit call <SID>editOrNew(<q-args>, <q-bang>)
-- command! -bang -nargs=? Ex call <SID>editOrNew(<q-args>, <q-bang>)
-- command! -bang Enew call <SID>editOrNew('__vscode_new__', <q-bang>)
-- command! -bang Find call VSCodeNotify('workbench.action.quickOpen')
-- command! -complete=file -bang -nargs=? Write if <q-bang> ==# '!' | call VSCodeNotify('workbench.action.files.saveAs') | else | call VSCodeNotify('workbench.action.files.save') | endif
-- command! -bang Saveas call VSCodeNotify('workbench.action.files.saveAs')
-- command! -bang Wall call VSCodeNotify('workbench.action.files.saveAll')
-- command! -bang Quit if <q-bang> ==# '!' | call VSCodeNotify('workbench.action.revertAndCloseActiveEditor') | else | call VSCodeNotify('workbench.action.closeActiveEditor') | endif
-- command! -bang Wq call <SID>saveAndClose()
-- command! -bang Xit call <SID>saveAndClose()
-- command! -bang Qall call VSCodeNotify('workbench.action.closeAllEditors')
-- command! -bang Wqall call <SID>saveAllAndClose()
-- command! -bang Xall call <SID>saveAllAndClose()
-- AlterCommand e[dit] Edit
-- AlterCommand ex Ex
-- AlterCommand ene[w] Enew
-- AlterCommand fin[d] Find
-- AlterCommand w[rite] Write
-- AlterCommand sav[eas] Saveas
-- AlterCommand wa[ll] Wall
-- AlterCommand q[uit] Quit
-- AlterCommand wq Wq
-- AlterCommand x[it] Xit
-- AlterCommand qa[ll] Qall
-- AlterCommand wqa[ll] Wqall
-- AlterCommand xa[ll] Xall
-- nnoremap ZZ <Cmd>Wq<CR>
-- nnoremap ZQ <Cmd>Quit!<CR>
-- ]], false)
-- Stolen from https://github.com/LunarVim/LunarVim/blob/4625145d0278d4a039e55c433af9916d93e7846a/vscode/settings.vim
vim.api.nvim_exec([[
" Better Navigation
nnoremap <silent> <C-j> :call VSCodeNotify('workbench.action.navigateDown')<CR>
xnoremap <silent> <C-j> :call VSCodeNotify('workbench.action.navigateDown')<CR>
nnoremap <silent> <C-k> :call VSCodeNotify('workbench.action.navigateUp')<CR>
xnoremap <silent> <C-k> :call VSCodeNotify('workbench.action.navigateUp')<CR>
nnoremap <silent> <C-h> :call VSCodeNotify('workbench.action.navigateLeft')<CR>
xnoremap <silent> <C-h> :call VSCodeNotify('workbench.action.navigateLeft')<CR>
nnoremap <silent> <C-l> :call VSCodeNotify('workbench.action.navigateRight')<CR>
xnoremap <silent> <C-l> :call VSCodeNotify('workbench.action.navigateRight')<CR>

nnoremap <silent> <Space> :call VSCodeNotify('whichkey.show')<CR>
xnoremap <silent> <Space> :call VSCodeNotify('whichkey.show')<CR>
]], false)
