#  NOTE(koekeishiya): A list of all built-in modifier and literal keywords can
#                     be found at https://github.com/koekeishiya/skhd/issues/1
#
#                     A hotkey is written according to the following rules:
#
#                       hotkey       = <mode> '<' <action> | <action>
#
#                       mode         = 'name of mode' | <mode> ',' <mode>
#
#                       action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                                      <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                                      <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#                       keysym       = <mod> '-' <key> | <key>
#
#                       mod          = 'modifier keyword' | <mod> '+' <mod>
#
#                       key          = <literal> | <keycode>
#
#                       literal      = 'single letter or built-in keyword'
#
#                       keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#                       proc_map_lst = * <proc_map>
#
#                       proc_map     = <string> ':' <command>
#
#                       string       = '"' 'sequence of characters' '"'
#
#                       command      = command is executed through '$SHELL -c' and
#                                      follows valid shell syntax. if the $SHELL environment
#                                      variable is not set, it will default to '/bin/bash'.
#                                      when bash is used, the ';' delimeter can be specified
#                                      to chain commands.
#
#                                      to allow a command to extend into multiple lines,
#                                      prepend '\' at the end of the previous line.
#
#                                      an EOL character signifies the end of the bind.
#
#                       ->           = keypress is not consumed by skhd
#
#  NOTE(koekeishiya): A mode is declared according to the following rules:
#
#                       mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#                                   '::' <name> '@'               | '::' <name>
#
#                       name      = desired name for this mode,
#
#                       @         = capture keypresses regardless of being bound to an action
#
#                       command   = command is executed through '$SHELL -c' and
#                                   follows valid shell syntax. if the $SHELL environment
#                                   variable is not set, it will default to '/bin/bash'.
#                                   when bash is used, the ';' delimeter can be specified
#                                   to chain commands.
#
#                                   to allow a command to extend into multiple lines,
#                                   prepend '\' at the end of the previous line.
#
#                                   an EOL character signifies the end of the bind.

# add an on_enter command to the default mode
#:: default : chunkc border::color 0xff775759
:: default : chunkc border::color  0xff2255ff ; echo "default mode"
#
# defines a new mode 'test' with an on_enter command, that captures keypresses
# :: test @ : chunkc border::color 0xff24ccaa
:: launch @ : chunkc border::color 0xffcc23aa ; echo "launch mode"

:: adjust : chunkc border::color 0xff23ccaa ; echo "adjust mode"
:: float @ : chunkc border::color 0xffccaa23 ; echo "float mode"

# green border
:: vimode : chunkc border::color 0xff33cc00 ; echo "mail vi mode"

default < fn - space ; launch
launch < fn - space ; default
default < cmd + shift - space ; float
default < fn + shift - space ; float
float < cmd + shift - space ; default
float < fn + shift - space ; default


# 0x35 = esc
launch, adjust, float < 0x35 ; default

launch < 1 : open -a 1Password ; skhd -k "0x35" ; echo "1: Launch 1pass"
#launch < b : open -a Bear ; skhd -k "0x35" ; echo "b: Launch Bear"
launch < c : skhd -k "0x35" ; open -a Calendar ; echo "b: Launch Calendar"
#launch < e : skhd -k "0x35" ; cd ~/iCloud/Notes ; vimr --nvim -c "VimwikiIndex" -c "call NewMeeting()" ; echo "e: Launch Meeting Notes"
launch < e : skhd -k "0x35" ; cd ~/iCloud/Notes ; vimr -c "VimwikiIndex" -c "call NewMeeting()" ; echo "e: Launch Meeting Notes"
launch < f : open -a Firefox ; skhd -k "0x35" ; echo "f: Launch Firefox"
launch < shift - f : open -na Finder ; skhd -k "0x35" ; echo "F: Launch Finder"
#launch < i : osascript -e 'tell application "iTerm" to Activate' ; skhd -k "0x35"
launch < m : open -a Superhuman ; skhd -k "0x35" ; echo "m: Launch Superhuman"
launch < shift - m : skhd -k "0x35" ; echo "M: Launch Mpv" ; /Applications/mpv.app/Contents/MacOS/mpv "$(pbpaste | sed -n '/http/p')" && skhd -k "alt - p"
launch < q : skhd -k "0x35" ; /Applications/qutebrowser.app/Contents/MacOS/qutebrowser --target auto -R "$(pbpaste | sed -n '/http/p')" ; echo "m: Launch Qutebrowser"
launch < shift - r : skhd -k "0x35" ; /usr/local/bin/brew services restart chunkwm ; echo 'R: restart chunkwm'
#launch < r : skhd -k "0x35" ; open -a RamboxPro
launch < s : open -a Spotify ; skhd -k "0x35" ; echo 's: Launch Spotify'
launch < shift - v : open -a "Visual Studio Code" ;  skhd -k "0x35" ; echo 'V: Launch Visual Studio Code'
#launch < n : skhd -k "0x35" ; cd ~/iCloud/Notes ; vimr --nvim -c "VimwikiIndex" -c "vsplit wiki/Hotsheet.md" ; echo 'n: Launch vimwiki'
#launch < n : skhd -k "0x35" ; cd ~/iCloud/Notes ; mvim -c "VimwikiIndex" -c "vsplit wiki/Hotsheet.md" ; echo 'n: Launch vimwiki'
launch < n : skhd -k "0x35" ; cd ~/iCloud/Notes ; vimr --nvim -c "VimwikiIndex" ; echo 'n: Launch vimwiki'
#launch < shift - n : skhd -k "0x35" ; cd ~/iCloud/Notes ; mvim -c VimwikiMakeDiaryNote -c Calendar -c "wincmd l" ; echo 'N: Launch vimwiki diary today'
#launch < shift - n : skhd -k "0x35" ; cd ~/iCloud/Notes ; vimr --nvim -c VimwikiMakeDiaryNote -c Calendar -c "wincmd l" ; echo 'N: Launch vimwiki diary today'
launch < shift - n : skhd -k "0x35" ; cd ~/iCloud/Notes ; mvim -c "call OpenDiaryToday()" -c Calendar -c "wincmd l" ; echo 'N: Launch vimwiki diary today'
#launch < shift - n : skhd -k "0x35" ; cd ~/iCloud/Notes ; mvim -c VimwikiDiaryIndex -c VimwikiDiaryGenerateLinks -c Calendar -c vsp -c VimwikiMakeDiaryNote
# ~
launch < shift - 0x32 : skhd -k "0x35" ; /Applications/Kitty.app/Contents/MacOS/kitty --single-instance -d ~ /Users/pwalsh/bin/captiveportal.sh ; echo '~: Launch captiveportal.sh'

# If launching kitty while a finder window is in the foreground, start in the dir of that finder window
#launch < 0x32 [
     #"Finder" : skhd -k "0x35" ; /Applications/Kitty.app/Contents/MacOS/kitty --single-instance -d "$(osascript -e 'tell application "Finder" to get the POSIX path of (target of front window as alias)')" ; echo '`: Launch new Kitty window in dir of current Finder window'
     #* : skhd -k "0x35" ; /Applications/Kitty.app/Contents/MacOS/kitty --single-instance -d ~ ; echo '`: Launch new Kitty window'
#]

ctrl - 0x32 : skhd -k "0x35" ; osascript -e 'tell application "Alacritty" to Activate' ; echo 'ctrl - `: Launch Alacritty'
fn - n : open -a Neovide ; echo 'fn -n: Launch MacVim'

launch < v [
     "Finder" : skhd -k "0x35" ; /usr/local/bin/gvim "$(osascript -e 'tell application "Finder" to get the POSIX path of (target of front window as alias)')" ; echo 'v: Launch MacVim current finder folder'
     *        : skhd -k "0x35" ; /usr/local/bin/gvim ; echo 'v: Launch MacVim'
]

#cmd + shift - f8 : echo "toggle brainme" ; pkill VLC || /Applications/Kitty.app/Contents/MacOS/kitty --single-instance ~/bin/brainme 35
#cmd + shift - f8 : echo "toggle brainme" ; pkill -9 VLC || nohup ~/bin/brainme 35
cmd + shift - f8 : echo "toggle brain.fm local music" ; ~/bin/brain-kill-local || nohup ~/bin/brainlocal 35

# focus window
fn - h : yabai -m window --focus west; echo "fn - h: focus west"
fn - j : yabai -m window --focus south; echo "fn - h: focus south"
fn - k : yabai -m window --focus north; echo "fn - h: focus north"
fn - l : yabai -m window --focus east; echo "fn - h: focus east"

# equalize size of windows
fn - 0 : chunkc tiling::desktop --equalize; echo "fn - 0: equalize windows"

# reset layout to a default
shift + fn - 0 : chunkc tiling::desktop --layout monocle ; chunkc tiling::desktop --layout bsp; echo "fn - 0: reset layout"

# swap window
shift + fn - h : yabai -m window --swap north; echo "fn + shift - h: swap west"
shift + fn - j : yabai -m window --swap south ; echo "fn + shift - j: swap south"
shift + fn - k : yabai -m window --swap north ; echo "fn + shift - k: swap north"
shift + fn - l : yabai -m window --swap east ; echo "fn + shift - l: swap east"

# move window
ctrl + fn - h : yabai -m window --warp west ; echo "fn + ctrl - h: warp west"
ctrl + fn - j : yabai -m window --warp south ; echo "fn + ctrl - j: warp south"
ctrl + fn - k : yabai -m window --warp north ; echo "fn + ctrl - k: warp north"
ctrl + fn - l : yabai -m window --warp east ; echo "fn + ctrl - l: warp east"

# --grid-layout rows:cols:left:top:width:height

# make floating window fill left/right/top/bottom-half of screen
float < left   : chunkc tiling::desktop --layout float ; skhd -k "0x35" ; chunkc tiling::window --grid-layout 1:2:0:0:1:1 ; echo 'left: float layout and grid 50% west'
float < right  : chunkc tiling::desktop --layout float ; skhd -k "0x35" ; chunkc tiling::window --grid-layout 1:2:1:0:1:1 ; echo 'right: float layout and grid 50% east'
float < up     : chunkc tiling::desktop --layout float ; skhd -k "0x35" ; chunkc tiling::window --grid-layout 2:1:0:0:1:1 ; echo 'up: float layout and grid 50% north'
float < down   : chunkc tiling::desktop --layout float ; skhd -k "0x35" ; chunkc tiling::window --grid-layout 2:1:0:1:1:1 ; echo 'down: float layout and grid 50% south'

# make floating window go to a 25% corner
float < 1   : chunkc tiling::desktop --layout float ; skhd -k "0x35" ; chunkc tiling::window --grid-layout 2:2:0:0:1:1 ; echo '1: float layout and grid 25% northwest'
float < 2   : chunkc tiling::desktop --layout float ; skhd -k "0x35" ; chunkc tiling::window --grid-layout 2:2:1:0:1:1 ; echo '2: float layout and grid 25% northeast'
float < 3   : chunkc tiling::desktop --layout float ; skhd -k "0x35" ; chunkc tiling::window --grid-layout 2:2:0:1:1:1 ; echo '3: float layout and grid 25% southwest'
float < 4   : chunkc tiling::desktop --layout float ; skhd -k "0x35" ; chunkc tiling::window --grid-layout 2:2:1:1:1:1 ; echo '4: float layout and grid 25% southeast'

# make floating window go to 25% or 75% left or right
float < shift - h   : chunkc tiling::desktop --layout float ; skhd -k "0x35" ; chunkc tiling::window --grid-layout 1:4:0:0:3:1 ; echo 'H: float layout and grid 75% left'
float < shift - l   : chunkc tiling::desktop --layout float ; skhd -k "0x35" ; chunkc tiling::window --grid-layout 1:4:1:0:3:1 ; echo 'L: float layout and grid 75% right'
float < h   : chunkc tiling::desktop --layout float ; skhd -k "0x35" ; chunkc tiling::window --grid-layout 1:4:0:0:1:1 ; echo 'h: float layout and grid 25% left'
float < l   : chunkc tiling::desktop --layout float ; skhd -k "0x35" ; chunkc tiling::window --grid-layout 1:4:3:0:1:1 ; echo 'l: float layout and grid 25% right'

# make floating window go to 25% or 75% top or bottom
float < shift - j   : chunkc tiling::desktop --layout float ; skhd -k "0x35" ; chunkc tiling::window --grid-layout 4:1:0:1:1:3 ; echo 'J: float layout and grid 75% bottom'
float < shift - k   : chunkc tiling::desktop --layout float ; skhd -k "0x35" ; chunkc tiling::window --grid-layout 4:1:0:0:1:3 ; echo 'K: float layout and grid 75% top'
float < j   : chunkc tiling::desktop --layout float ; skhd -k "0x35" ; chunkc tiling::window --grid-layout 4:1:0:3:1:1 ; echo 'j: float layout and grid 25% bottom'
float < k   : chunkc tiling::desktop --layout float ; skhd -k "0x35" ; chunkc tiling::window --grid-layout 4:1:0:0:1:1 ; echo 'k: float layout and grid 25% top'

# make floating window go to 33% left, middle, or right
float < a   : chunkc tiling::desktop --layout float ; skhd -k "0x35" ; chunkc tiling::window --grid-layout 1:3:0:0:1:1 ; echo 'a: float layout and grid 33% left'
float < b   : chunkc tiling::desktop --layout float ; skhd -k "0x35" ; chunkc tiling::window --grid-layout 1:3:1:0:1:1 ; echo 'b: float layout and grid 33% middle'
float < c   : chunkc tiling::desktop --layout float ; skhd -k "0x35" ; chunkc tiling::window --grid-layout 1:3:2:0:1:1 ; echo 'c: float layout and grid 33% right'

# make floating window go to 33% top, middle, or bottom
float < shift - a   : chunkc tiling::desktop --layout float ; skhd -k "0x35" ; chunkc tiling::window --grid-layout 3:1:0:0:1:1 ; echo 'A: float layout and grid 33% top'
float < shift - b   : chunkc tiling::desktop --layout float ; skhd -k "0x35" ; chunkc tiling::window --grid-layout 3:1:0:1:1:1 ; echo 'B: float layout and grid 33% middle'
float < shift - c   : chunkc tiling::desktop --layout float ; skhd -k "0x35" ; chunkc tiling::window --grid-layout 3:1:0:2:1:1 ; echo 'C: float layout and grid 33% bottom'

float < return : chunkc tiling::desktop --layout bsp ; skhd -k "0x35" ; echo 'return: back to autotile'
float < space : chunkc tiling::desktop --layout bsp ; skhd -k "0x35" ; echo 'return: back to autotile'

# send window to desktop
#shift + alt - x : chunkc tiling::window --send-to-desktop $(chunkc get _last_active_desktop)
#shift + alt - z : chunkc tiling::window --send-to-desktop prev
#shift + alt - c : chunkc tiling::window --send-to-desktop next
fn - 1 : yabai -m window --space 1 ; echo 'fn - 1: send to desktop 1'
fn - 2 : yabai -m window --space 2 ; echo 'fn - 2: send to desktop 2'
fn - 3 : yabai -m window --space 3 ; echo 'fn - 3: send to desktop 3'
fn - 4 : yabai -m window --space 4 ; echo 'fn - 4: send to desktop 4'
fn - 5 : yabai -m window --space 5 ; echo 'fn - 5: send to desktop 5'
fn - 6 : yabai -m window --space 6 ; echo 'fn - 6: send to desktop 6'
fn - 7 : yabai -m window --space 7 ; echo 'fn - 7: send to desktop 7'
fn - 8 : yabai -m window --space 8 ; echo 'fn - 8: send to desktop 8'
fn - 9 : yabai -m window --space 9 ; echo 'fn - 9: send to desktop 9'

# send window to desktop and follow focus
shift + fn - 1 : yabai -m window --space 1; skhd -k 'ctrl - 1'; echo 'fn + shift - 1: send to desktop 1 and follow focus'
shift + fn - 2 : yabai -m window --space 2;  skhd -k 'ctrl - 2'; echo 'fn + shift - 2: send to desktop 2 and follow focus'
shift + fn - 3 : yabai -m window --space 3;  skhd -k 'ctrl - 3'; echo 'fn + shift - 3: send to desktop 3 and follow focus'
shift + fn - 4 : yabai -m window --space 4; skhd -k 'ctrl - 4'; echo 'fn + shift - 4: send to desktop 4 and follow focus'
shift + fn - 5 : yabai -m window --space 5;  skhd -k 'ctrl - 5'; echo 'fn + shift - 5: send to desktop 5 and follow focus'
shift + fn - 6 : yabai -m window --space 6;  skhd -k 'ctrl - 6'; echo 'fn + shift - 6: send to desktop 6 and follow focus'
shift + fn - 7 : yabai -m window --space 7;  skhd -k 'ctrl - 7'; echo 'fn + shift - 7: send to desktop 7 and follow focus'
shift + fn - 8 : yabai -m window --space 8;  skhd -k 'ctrl - 8'; echo 'fn + shift - 8: send to desktop 8 and follow focus'
shift + fn - 9 : yabai -m window --space 9;  skhd -k 'ctrl - 9'; echo 'fn + shift - 9: send to desktop 9 and follow focus'

# send window to monitor
fn - z  : yabai -m window --display 1; chunkc tiling::monitor -f 1 ; echo 'fn - z: send to monitor 1'
fn - x  : yabai -m window --display 2; chunkc tiling::monitor -f 2 ; echo 'fn - x: send to monitor 2'

# resize window
fn - a : yabai -m window --resize left:-20:0; echo 'fn - a: move free edge west'
fn - s : yabai -m window --resize top:0:-20; echo 'fn - s: move free edge south'
fn - w : yabai -m window --resize top:0:20; echo 'fn - w: move free edge north'
fn - d : yabai -m window --resize left:20:0; echo 'fn - d: move free edge east'

# rotate tree
alt - r : chunkc tiling::desktop --rotate 90 ; echo 'alt - r: rotate tree'

# mirror tree y-axis
alt - y : chunkc tiling::desktop --mirror vertical ; echo 'alt - y: mirror y-axis'

# mirror tree x-axis
alt - x : chunkc tiling::desktop --mirror horizontal ; echo 'alt - x: mirror x-axis'

# toggle desktop offset
alt - a : chunkc tiling::desktop --toggle offset ; echo 'alt - a: toggle window offset'

# toggle window fullscreen
#alt - f :  yabai -m window --toggle float; yabai -m window --grid 1:1:0:0:1:1 ; echo 'alt - f: toggle current window full screen float'
alt -f : yabai -m window --toggle zoom-fullscreen ;  echo 'alt - f: toggle current window full screen float'

# toggle window parent zoom
alt - d : yabai -m window --toggle zoom-parent ; echo 'alt - d: toggle window zoom to parent space'

# toggle window split type
alt - e : chunkc tiling::window --toggle split ; echo 'alt - e: switch area split direction'

# toggle window fade
#alt - q : chunkc tiling::window --toggle fade

# float / unfloat window and center on screen
alt - t : yabai -m window --toggle float ;\
          yabai -m window --grid 4:4:1:1:2:2 ; echo 'alt - t: float window center'

# toggle sticky
alt - s : yabai -m window --toggle sticky ; echo 'alt - s: toggle sticky window'

# toggle sticky, float and resize to picture-in-picture size
alt - p : yabai -m window --toggle sticky;\
          yabai -m window --grid 5:5:4:0:1:1 ; echo 'alt - p: pic in pic top right'

# change layout of desktop -- toggle three ways
fn - m : M=$(chunkc tiling::query --desktop mode) ;\
        if [[ "$M" == "float" ]] ; then \
            chunkc tiling::desktop --layout monocle ;\
        elif [[ "$M" == "bsp" ]] ; then \
            chunkc tiling::desktop --layout float ;\
        else chunkc tiling::desktop --layout bsp ; fi ; echo 'fn - m: toggle desktop layout'

fn + shift - q : chunkc tiling::desktop --serialize ~/.chunkwm_layouts/dev_q
fn - q : chunkc tiling::desktop --deserialize ~/.chunkwm_layouts/dev_q

fn + shift - e : chunkc tiling::desktop --serialize ~/.chunkwm_layouts/dev_e
fn - e : chunkc tiling::desktop --deserialize ~/.chunkwm_layouts/dev_e

# clear border when doing screenshot
cmd + shift - 4 -> : chunkc border::clear

# restart the computer
cmd + alt + ctrl - s : sudo shutdown -r now

# 0x35 = esc
# On fn-esc, if in mail.app, switch to mail vi mode. otherwise ignore
#default < fn - 0x35 [
    #"Mail"        : vimode
    #"Mail.app"    : vimode
    #*             ~
#]
default < fn - v ; vimode
#default < fn - v [
    #"Mail"        : vimode
    #"Mail.app"    : vimode
    #*             ~
#]

# escape goes back to normal, but so does i
vimode < 0x35 ; default
vimode < i ; default

vimode < j : skhd -k "down"
vimode < k : skhd -k "up"
vimode < h : skhd -k "left"
vimode < l : skhd -k "right"
vimode < x : skhd -k "cmd - w"
vimode < n : skhd -k "cmd - n"
# 0x2c = /
vimode < 0x2C [
    # search all emails
    "Mail"        : skhd -k "cmd + alt - f"
    # default to standard find
    *             : skhd -k "cmd - f"
]
vimode < e [
    # Archive email
    "Mail"        : skhd -k "cmd + ctrl - a"
    *             ~
]
vimode < shift - 1 [
    # Mark as spam
    "Mail"        : skhd -k "shift + cmd - j"
    *             ~
]
vimode < f [
    # Forward
    "Mail"        : skhd -k "shift + cmd - f"
    *             ~
]
vimode < a [
    # Replay all
    "Mail"        : skhd -k "shift + cmd - r"
    *             ~
]
vimode < r [
    # Reply to sender
    "Mail"        : skhd -k "cmd - r"
    *             ~
]
vimode < shift - 3 [
    # Delete email
    "Mail"        : skhd -k "delete"
    *             ~
]
vimode < u [
    # Up to mailbox (we have to hard code which one, sadly)
    "Mail"        : skhd -k "cmd - 1"
    *             ~
]
vimode < shift - u [
    # Toggle read/unread
    "Mail"        : skhd -k "shift + cmd - u"
    *             ~
]
vimode < p [
    # Load remote images
    "Mail"        : osascript -e 'tell application "Mail" to Activate' -e 'tell application "System Events" to tell application process "Mail"' -e 'click button "Load remote content" of group 1 of group 1 of scroll area 2 of splitter group 1 of splitter group 1 of front window' -e 'end tell'
    *             ~
]
